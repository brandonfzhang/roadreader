# -*- coding: utf-8 -*-
"""FinalCarTest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/NapervilleCentral/roadreader/blob/picar/FinalCarTest.ipynb
"""

from picar import front_wheels
from picar import back_wheels
from picar import ADC
import time
import picar
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array
import numpy as np
import h5py
import imutils
from imutils.video import VideoStream
import cv2
from threading import Thread
import time
import datetime

picar.setup()

fw = front_wheels.Front_Wheels(db='config')
bw = back_wheels.Back_Wheels(db='config')

gate_value = 30     # less then the normal, will act
speed = 90
bw.speed = speed

status = 0
recentStatus = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
average = 0

model = keras.Sequential([
  layers.Conv2D(14, 3, activation='relu', input_shape=(300,400,3)),
  layers.MaxPooling2D((2,2), padding='same'),
  layers.Conv2D(28, 3, activation='relu'),
  layers.MaxPooling2D((2,2), padding='same'),
  layers.Conv2D(42, 3, activation='relu'),
  layers.MaxPooling2D((2,2), padding='same'),
  layers.Conv2D(84, 3, activation='relu'),
  layers.MaxPooling2D((2,2), padding='same'),
  layers.Conv2D(84, 3, activation='relu'),
  layers.MaxPooling2D((2,2), padding='same'),
  layers.Flatten(),
  layers.Dense(200, activation='relu'),
  layers.Dense(2, activation='softmax'), #classification layer; 0 for none 1 for stop
])

model.load_weights('model2.h5')

vs = VideoStream(src=0).start()
time.sleep(2.0)

bw.backward()

stop = False

while !(stop):
  #get status of car
  frame = vs.read()
  frame = imutils.resize(frame, width=400)
    
  #image = cv2.resize(frame, (28, 28))
  image = frame.astype("float") / 255.0
  image = img_to_array(image)
  image = np.expand_dims(image, axis=0)
  status = np.argmax(model.predict(image)[0]) #must write getStatus method in the tester
  
  label = "Stop Sign"
  label = "{}: {}".format(label, status)
  frame = cv2.putText(frame, label, (10, 25), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
  
  cv2.imshow("Frame", frame)
  key = cv2.waitKey(1) & 0xFF
    
  if key == ord("q"):
    break;
  
  recentStatus.pop()
  recentStatus.append(status)
  total = 0
  
  signCount = 0
  for s in recentStatus:
      if s > 0.7:
        signCount += 1
  if signCount >= 5:
    stop = True

#slows down once gets enough positives
#use threads for more accuracy
while speed > 0:
   bw.speed = speed-i

bw.stop()
